<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3bf57cec3c37</title>
    <link>https://erasche.github.io/tags/mapgen/index.xml</link>
    <description>Recent content on 3bf57cec3c37</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://erasche.github.io/tags/mapgen/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Link Collection / Inspiration</title>
      <link>https://erasche.github.io/post/2017-01-31-links/</link>
      <pubDate>Tue, 31 Jan 2017 05:09:00 +0000</pubDate>
      
      <guid>https://erasche.github.io/post/2017-01-31-links/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.elysianlegends.com/?p=11&#34;&gt;http://blog.elysianlegends.com/?p=11&lt;/a&gt; layout, structure, planning. Started implementing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jongallant/DungeonGenerator&#34;&gt;https://github.com/jongallant/DungeonGenerator&lt;/a&gt; neat picture&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gamedevelopment.tutsplus.com/tutorials/bake-your-own-3d-dungeons-with-procedural-recipes--gamedev-14360&#34;&gt;https://gamedevelopment.tutsplus.com/tutorials/bake-your-own-3d-dungeons-with-procedural-recipes--gamedev-14360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php&#34;&gt;http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;great gifs, &amp;ldquo;tinykeep&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/&#34;&gt;https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/&lt;/a&gt; more on same algo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Relative_neighborhood_graph&#34;&gt;https://en.wikipedia.org/wiki/Relative_neighborhood_graph&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;good for keeping paths between rooms short&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/&#34;&gt;http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/&lt;/a&gt; 3 maze-y 5 me&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dungeon Generation</title>
      <link>https://erasche.github.io/post/2017-01-25-dungeon-gen/</link>
      <pubDate>Wed, 25 Jan 2017 02:07:15 +0000</pubDate>
      
      <guid>https://erasche.github.io/post/2017-01-25-dungeon-gen/</guid>
      <description>&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.min.js&#34; integrity=&#34;sha256-4mL8TQfOJSbg0f42dQw5cKLl2ngQXUSXqfQnvK11M44=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#34; integrity=&#34;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;

&lt;p&gt;Found &lt;a href=&#34;http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php&#34;&gt;this&lt;/a&gt;
blog post, so we&amp;rsquo;re going to re-implement that in JS as well. This looks very
promising for building rooms/dungeons for red-eclipse.&lt;/p&gt;

&lt;div id=&#34;plots&#34;&gt;
&lt;/div&gt;

&lt;script src=&#34;https://erasche.github.io/js/bboxCollide.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
// Adapt to viewport
var width = $(&#39;section.post&#39;).width();
// These plots are mostly a 1:1 ratio.
var height = width;

var width = 400;
var height = 400;

// Setup the SVG object on the page
function _prep_svg(){
    var svg = d3.select(&#34;#plots&#34;).append(&#39;svg&#39;)
        .attr(&#34;width&#34;, width)
        .attr(&#34;height&#34;, height);
    return svg;
}

// Setup various objects needed by all the plot functions
function _prep_plot(){

    return [x, y, area];
}

function getRandomArbitrary(min, max) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
    return Math.random() * (max - min) + min;
}

function getRandomPointInCircle(radius){
    var t = 2 * Math.PI * Math.random(),
        u = Math.random() + Math.random(),
        r = null;

    if(u &gt; 1){
        r = 2 - u;
    } else {
        r = u;
    }
    return [
        Math.round(radius * r * Math.cos(t)),
        Math.round(radius * r * Math.sin(t))
    ];
}

// And lastly fully imitate the original.
var svg = _prep_svg();

var rectangles = [];

var x = d3.scaleLinear().range([-width / 2, width/2]),
    y = d3.scaleLinear().range([-height / 2, height/2]);


function rad2deg(rad){
    return rad * (180 / Math.PI);
}


for(var i = 0; i &lt; 15; i++){
    var [x, y] = getRandomPointInCircle(128);
    var w = Math.round(getRandomArbitrary(20, 85));
    var h = Math.round(getRandomArbitrary(20, 85));
    var node = {
        x: x - w / 2,
        y: y - h / 2,
        cx: x,
        cy: y,
        w: w,
        h: h,
        theta: Math.atan2(x, y),
    };
    rectangles.push(node);
}

var main = svg.append(&#39;g&#39;).attr(&#39;transform&#39;, &#39;translate(200, 200)&#39;);

function update(){
    main.selectAll(&#39;g&#39;)
    .data(rectangles)
    .enter()
        .append(&#39;rect&#39;)
        .attr(&#34;x&#34;, function(d){ return d.x})
        .attr(&#34;y&#34;, function(d){ return d.y})
        .attr(&#34;width&#34;, function(d){ return d.w})
        .attr(&#34;height&#34;, function(d){ return d.h})
        .attr(&#34;stroke&#34;, &#34;black&#34;)
        .attr(&#34;fill&#34;, &#34;red&#34;);
}

function centerToCentroid(rect){
    //console.log(rect);
}


function intersect(a, b) {
    return (
        a.x &lt;= b.x + b.width &amp;&amp;
        b.x &lt;= a.x + a.width &amp;&amp;
        a.y &lt;= b.y + b.height &amp;&amp;
        b.y &lt;= a.y + a.height
    )
}

function tick(){
    for(var i = 0; i &lt; rectangles.length; i++){
        rectangles[i].x += 10;
        //for(var j = 0; j &lt; rectangles.length; j++){
        //  console.log(intersect(rectangles[i], rectangles[j]))
        //}
    }
}
tick();
update();




&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Bitesofcode&#39;s Terrain Generation</title>
      <link>https://erasche.github.io/post/2017-01-22-bitesofcode-landscape/</link>
      <pubDate>Sun, 22 Jan 2017 01:29:05 +0000</pubDate>
      
      <guid>https://erasche.github.io/post/2017-01-22-bitesofcode-landscape/</guid>
      <description>&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.min.js&#34; integrity=&#34;sha256-4mL8TQfOJSbg0f42dQw5cKLl2ngQXUSXqfQnvK11M44=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#34; integrity=&#34;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;

&lt;p&gt;Found &lt;a href=&#34;https://bitesofcode.wordpress.com/2016/12/23/landscape-generation-using-midpoint-displacement/&#34;&gt;this&lt;/a&gt; blog post and enjoyed the graphics. Re-implementing in JS for a learning exercise.&lt;/p&gt;

&lt;p&gt;I started this post with the idea of doing fancy controls but&amp;hellip; meh. No time for this, so you just get pretty pictures.&lt;/p&gt;

&lt;div id=&#34;plots-static&#34;&gt;
    &lt;img src=&#34;https://erasche.github.io/assets/img/bites/a.png&#34; style=&#34;max-width: 100%&#34;&gt;
    &lt;img src=&#34;https://erasche.github.io/assets/img/bites/b.png&#34; style=&#34;max-width: 100%&#34;&gt;
    &lt;img src=&#34;https://erasche.github.io/assets/img/bites/c.png&#34; style=&#34;max-width: 100%&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;plots&#34;&gt;
&lt;/div&gt;

&lt;script src=&#34;https://erasche.github.io/js/bitesofcode.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And here&amp;rsquo;s my code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Adapt to viewport&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; width &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;section.post&amp;#39;&lt;/span&gt;).width();
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// A 1:2 ratio looks nicer.&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; height &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; width &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;;

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Color function borrowed from original post&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; color(idx){
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; colors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [
		[&lt;span style=&#34;color: #40a070&#34;&gt;195&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;157&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;224&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;158&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;204&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;130&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;138&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;99&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;82&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;38&lt;/span&gt;],
		[&lt;span style=&#34;color: #40a070&#34;&gt;240&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;203&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;163&lt;/span&gt;]
	];
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rgb(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; colors[idx][&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; colors[idx][&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;colors[idx][&lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Setup the SVG object on the page&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; _prep_svg(){
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; svg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d3.select(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;#plots&amp;quot;&lt;/span&gt;).append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;)
		.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;, width)
		.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;, height);
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; svg;
}

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Setup various objects needed by all the plot functions&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; _prep_plot(){
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d3.scaleLinear().range([&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;, width]),
		y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d3.scaleLinear().range([height, &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]);

	x.domain([&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;256&lt;/span&gt;]);
	y.domain([&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;, height]);

	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; area &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d3.area()
		.x(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(d) { &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; x(d[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]);  })
		.y0(height)
		.y1(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(d) { &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; y(d[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;]);  });

	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; [x, y, area];
}

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Plot a single data series&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; plot(data){
	plot_multi([
		{
			data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; data,
			color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;,
		}
	])
};

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Plot more than one data series&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; plot_multi(data_arr, svg){
	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// arr of&lt;/span&gt;
	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// {data: data, color: color}&lt;/span&gt;

	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Get our components&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(svg &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;undefined&lt;/span&gt;){
		svg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _prep_svg();
	}
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; [x, y, area] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _prep_plot();

	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// For each {data: data, color: color} in the data_arr, append an SVG path element.&lt;/span&gt;
	data_arr.forEach(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(d){
		svg.append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;)
			.data([d.data])
			.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;area&amp;quot;&lt;/span&gt;)
			.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, area)
			.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;, d.color);
	})
	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Return the SVG in case we want to re-use it.&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; svg;
};

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; getRandomArbitrary(min, max) {
	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; (max &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; min) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; min;
}

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Midpoint displacement algorithm, completely copied from bitesofcode website.&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; midpoint_displacement(start, end, roughness, vertical_displacement, num_of_iterations){
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(vertical_displacement &lt;span style=&#34;color: #666666&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;undefined&lt;/span&gt;){
		vertical_displacement &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (start &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; end) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;;
	}
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(num_of_iterations &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;undefined&lt;/span&gt;){
		num_of_iterations &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt;;
	}

	points &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [start, end];
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; iteration &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;while&lt;/span&gt;(iteration &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; num_of_iterations) {
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; new_points &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [];
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; points.length &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;){
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Get the bounding points&lt;/span&gt;
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; left &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; points[i];
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; right &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; points[i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;];
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Average for new midpoint&lt;/span&gt;
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; midpoint &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;;
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Apply displacement&lt;/span&gt;
			midpoint &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; getRandomArbitrary(&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;vertical_displacement, vertical_displacement);
			new_points.push(left);
			new_points.push(midpoint);
		}
		&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Include the last &amp;#39;right&amp;#39; since it wasn&amp;#39;t caught before.&lt;/span&gt;
		new_points.push(points[points.length &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;]);
		&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Replace points&lt;/span&gt;
		points &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; new_points;
		&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Smooth out vertical displacement&lt;/span&gt;
		vertical_displacement &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Math&lt;/span&gt;.pow(&lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;roughness) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; vertical_displacement;
		iteration&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;
	}

	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; num_points &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; points.length &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; points.map(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(x, i){
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; [
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Convert [10, 20, 10] to [[0, 10], [128, 20], [256, 10]]&lt;/span&gt;
			&lt;span style=&#34;color: #40a070&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; num_points,
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// But we also want to re-scale vertically since our height changes&lt;/span&gt;
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// on smaller devices. on small devices height could be ~100.&lt;/span&gt;
			&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Everything would be off the page.&lt;/span&gt;
			x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; height &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;600&lt;/span&gt;
		];
	});
};

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Try out a test plot&lt;/span&gt;
points &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;8&lt;/span&gt;);
plot(points);

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Now try a more complex one&lt;/span&gt;
plot_multi([
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;450&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;420&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;0.9&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;8&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;5&lt;/span&gt;),
	},
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;350&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;320&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;8&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;4&lt;/span&gt;),
	},
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;260&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;320&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;0.9&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;8&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;),
	},
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;190&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;9&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;),
	},
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.2&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;12&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;),
	},
	{
		data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;12&lt;/span&gt;),
		color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;),
	},
]);

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// And lastly fully imitate the original.&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; svg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _prep_svg();

svg.append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;, width)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;, height)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;, color(&lt;span style=&#34;color: #40a070&#34;&gt;6&lt;/span&gt;));

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// sun&lt;/span&gt;
svg.append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;ellipse&amp;quot;&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;rx&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;25&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;ry&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;25&lt;/span&gt;)
	.attr(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;white&amp;quot;&lt;/span&gt;);

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Layers&lt;/span&gt;
plot_multi([
	{ data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;350&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;320&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;0.9&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;8&lt;/span&gt;),    color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)},
	{ data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;270&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;190&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;9&lt;/span&gt;),      color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;)},
	{ data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;180&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.2&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;12&lt;/span&gt;),     color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;2&lt;/span&gt;)},
	{ data&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; midpoint_displacement(&lt;span style=&#34;color: #40a070&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color: #40a070&#34;&gt;12&lt;/span&gt;),    color&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; color(&lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;)},
], svg);
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>